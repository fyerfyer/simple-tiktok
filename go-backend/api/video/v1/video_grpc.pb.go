// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: video/v1/video.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VideoService_GetFeed_FullMethodName                 = "/video.v1.VideoService/GetFeed"
	VideoService_PublishVideo_FullMethodName            = "/video.v1.VideoService/PublishVideo"
	VideoService_UploadVideoFile_FullMethodName         = "/video.v1.VideoService/UploadVideoFile"
	VideoService_GetPublishList_FullMethodName          = "/video.v1.VideoService/GetPublishList"
	VideoService_GetUploadConfig_FullMethodName         = "/video.v1.VideoService/GetUploadConfig"
	VideoService_GetUploadProgress_FullMethodName       = "/video.v1.VideoService/GetUploadProgress"
	VideoService_GetVideoInfo_FullMethodName            = "/video.v1.VideoService/GetVideoInfo"
	VideoService_GetVideosInfo_FullMethodName           = "/video.v1.VideoService/GetVideosInfo"
	VideoService_UpdateVideoStats_FullMethodName        = "/video.v1.VideoService/UpdateVideoStats"
	VideoService_InitiateMultipartUpload_FullMethodName = "/video.v1.VideoService/InitiateMultipartUpload"
	VideoService_UploadPart_FullMethodName              = "/video.v1.VideoService/UploadPart"
	VideoService_CompleteMultipartUpload_FullMethodName = "/video.v1.VideoService/CompleteMultipartUpload"
	VideoService_AbortMultipartUpload_FullMethodName    = "/video.v1.VideoService/AbortMultipartUpload"
	VideoService_ListUploadedParts_FullMethodName       = "/video.v1.VideoService/ListUploadedParts"
)

// VideoServiceClient is the client API for VideoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 视频服务
type VideoServiceClient interface {
	// 获取视频流
	GetFeed(ctx context.Context, in *GetFeedRequest, opts ...grpc.CallOption) (*GetFeedResponse, error)
	// 视频上传 - 支持multipart form data
	PublishVideo(ctx context.Context, in *PublishVideoRequest, opts ...grpc.CallOption) (*PublishVideoResponse, error)
	// 文件上传处理 - 专门用于处理multipart文件上传
	UploadVideoFile(ctx context.Context, in *UploadVideoFileRequest, opts ...grpc.CallOption) (*PublishVideoResponse, error)
	// 获取发布列表
	GetPublishList(ctx context.Context, in *GetPublishListRequest, opts ...grpc.CallOption) (*GetPublishListResponse, error)
	// 获取上传配置
	GetUploadConfig(ctx context.Context, in *GetUploadConfigRequest, opts ...grpc.CallOption) (*GetUploadConfigResponse, error)
	// 获取上传进度
	GetUploadProgress(ctx context.Context, in *GetUploadProgressRequest, opts ...grpc.CallOption) (*GetUploadProgressResponse, error)
	// gRPC内部调用接口
	GetVideoInfo(ctx context.Context, in *GetVideoInfoRequest, opts ...grpc.CallOption) (*GetVideoInfoResponse, error)
	GetVideosInfo(ctx context.Context, in *GetVideosInfoRequest, opts ...grpc.CallOption) (*GetVideosInfoResponse, error)
	UpdateVideoStats(ctx context.Context, in *UpdateVideoStatsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 初始化分片上传
	InitiateMultipartUpload(ctx context.Context, in *InitiateMultipartUploadRequest, opts ...grpc.CallOption) (*InitiateMultipartUploadResponse, error)
	// 上传分片
	UploadPart(ctx context.Context, in *UploadPartRequest, opts ...grpc.CallOption) (*UploadPartResponse, error)
	// 完成分片上传
	CompleteMultipartUpload(ctx context.Context, in *CompleteMultipartUploadRequest, opts ...grpc.CallOption) (*PublishVideoResponse, error)
	// 取消分片上传
	AbortMultipartUpload(ctx context.Context, in *AbortMultipartUploadRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 列出已上传的分片
	ListUploadedParts(ctx context.Context, in *ListUploadedPartsRequest, opts ...grpc.CallOption) (*ListUploadedPartsResponse, error)
}

type videoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoServiceClient(cc grpc.ClientConnInterface) VideoServiceClient {
	return &videoServiceClient{cc}
}

func (c *videoServiceClient) GetFeed(ctx context.Context, in *GetFeedRequest, opts ...grpc.CallOption) (*GetFeedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFeedResponse)
	err := c.cc.Invoke(ctx, VideoService_GetFeed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) PublishVideo(ctx context.Context, in *PublishVideoRequest, opts ...grpc.CallOption) (*PublishVideoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublishVideoResponse)
	err := c.cc.Invoke(ctx, VideoService_PublishVideo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) UploadVideoFile(ctx context.Context, in *UploadVideoFileRequest, opts ...grpc.CallOption) (*PublishVideoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublishVideoResponse)
	err := c.cc.Invoke(ctx, VideoService_UploadVideoFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) GetPublishList(ctx context.Context, in *GetPublishListRequest, opts ...grpc.CallOption) (*GetPublishListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPublishListResponse)
	err := c.cc.Invoke(ctx, VideoService_GetPublishList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) GetUploadConfig(ctx context.Context, in *GetUploadConfigRequest, opts ...grpc.CallOption) (*GetUploadConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUploadConfigResponse)
	err := c.cc.Invoke(ctx, VideoService_GetUploadConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) GetUploadProgress(ctx context.Context, in *GetUploadProgressRequest, opts ...grpc.CallOption) (*GetUploadProgressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUploadProgressResponse)
	err := c.cc.Invoke(ctx, VideoService_GetUploadProgress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) GetVideoInfo(ctx context.Context, in *GetVideoInfoRequest, opts ...grpc.CallOption) (*GetVideoInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVideoInfoResponse)
	err := c.cc.Invoke(ctx, VideoService_GetVideoInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) GetVideosInfo(ctx context.Context, in *GetVideosInfoRequest, opts ...grpc.CallOption) (*GetVideosInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVideosInfoResponse)
	err := c.cc.Invoke(ctx, VideoService_GetVideosInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) UpdateVideoStats(ctx context.Context, in *UpdateVideoStatsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, VideoService_UpdateVideoStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) InitiateMultipartUpload(ctx context.Context, in *InitiateMultipartUploadRequest, opts ...grpc.CallOption) (*InitiateMultipartUploadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InitiateMultipartUploadResponse)
	err := c.cc.Invoke(ctx, VideoService_InitiateMultipartUpload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) UploadPart(ctx context.Context, in *UploadPartRequest, opts ...grpc.CallOption) (*UploadPartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadPartResponse)
	err := c.cc.Invoke(ctx, VideoService_UploadPart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) CompleteMultipartUpload(ctx context.Context, in *CompleteMultipartUploadRequest, opts ...grpc.CallOption) (*PublishVideoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublishVideoResponse)
	err := c.cc.Invoke(ctx, VideoService_CompleteMultipartUpload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) AbortMultipartUpload(ctx context.Context, in *AbortMultipartUploadRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, VideoService_AbortMultipartUpload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) ListUploadedParts(ctx context.Context, in *ListUploadedPartsRequest, opts ...grpc.CallOption) (*ListUploadedPartsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUploadedPartsResponse)
	err := c.cc.Invoke(ctx, VideoService_ListUploadedParts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VideoServiceServer is the server API for VideoService service.
// All implementations must embed UnimplementedVideoServiceServer
// for forward compatibility.
//
// 视频服务
type VideoServiceServer interface {
	// 获取视频流
	GetFeed(context.Context, *GetFeedRequest) (*GetFeedResponse, error)
	// 视频上传 - 支持multipart form data
	PublishVideo(context.Context, *PublishVideoRequest) (*PublishVideoResponse, error)
	// 文件上传处理 - 专门用于处理multipart文件上传
	UploadVideoFile(context.Context, *UploadVideoFileRequest) (*PublishVideoResponse, error)
	// 获取发布列表
	GetPublishList(context.Context, *GetPublishListRequest) (*GetPublishListResponse, error)
	// 获取上传配置
	GetUploadConfig(context.Context, *GetUploadConfigRequest) (*GetUploadConfigResponse, error)
	// 获取上传进度
	GetUploadProgress(context.Context, *GetUploadProgressRequest) (*GetUploadProgressResponse, error)
	// gRPC内部调用接口
	GetVideoInfo(context.Context, *GetVideoInfoRequest) (*GetVideoInfoResponse, error)
	GetVideosInfo(context.Context, *GetVideosInfoRequest) (*GetVideosInfoResponse, error)
	UpdateVideoStats(context.Context, *UpdateVideoStatsRequest) (*emptypb.Empty, error)
	// 初始化分片上传
	InitiateMultipartUpload(context.Context, *InitiateMultipartUploadRequest) (*InitiateMultipartUploadResponse, error)
	// 上传分片
	UploadPart(context.Context, *UploadPartRequest) (*UploadPartResponse, error)
	// 完成分片上传
	CompleteMultipartUpload(context.Context, *CompleteMultipartUploadRequest) (*PublishVideoResponse, error)
	// 取消分片上传
	AbortMultipartUpload(context.Context, *AbortMultipartUploadRequest) (*emptypb.Empty, error)
	// 列出已上传的分片
	ListUploadedParts(context.Context, *ListUploadedPartsRequest) (*ListUploadedPartsResponse, error)
	mustEmbedUnimplementedVideoServiceServer()
}

// UnimplementedVideoServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVideoServiceServer struct{}

func (UnimplementedVideoServiceServer) GetFeed(context.Context, *GetFeedRequest) (*GetFeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeed not implemented")
}
func (UnimplementedVideoServiceServer) PublishVideo(context.Context, *PublishVideoRequest) (*PublishVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishVideo not implemented")
}
func (UnimplementedVideoServiceServer) UploadVideoFile(context.Context, *UploadVideoFileRequest) (*PublishVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadVideoFile not implemented")
}
func (UnimplementedVideoServiceServer) GetPublishList(context.Context, *GetPublishListRequest) (*GetPublishListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublishList not implemented")
}
func (UnimplementedVideoServiceServer) GetUploadConfig(context.Context, *GetUploadConfigRequest) (*GetUploadConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUploadConfig not implemented")
}
func (UnimplementedVideoServiceServer) GetUploadProgress(context.Context, *GetUploadProgressRequest) (*GetUploadProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUploadProgress not implemented")
}
func (UnimplementedVideoServiceServer) GetVideoInfo(context.Context, *GetVideoInfoRequest) (*GetVideoInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoInfo not implemented")
}
func (UnimplementedVideoServiceServer) GetVideosInfo(context.Context, *GetVideosInfoRequest) (*GetVideosInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideosInfo not implemented")
}
func (UnimplementedVideoServiceServer) UpdateVideoStats(context.Context, *UpdateVideoStatsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVideoStats not implemented")
}
func (UnimplementedVideoServiceServer) InitiateMultipartUpload(context.Context, *InitiateMultipartUploadRequest) (*InitiateMultipartUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateMultipartUpload not implemented")
}
func (UnimplementedVideoServiceServer) UploadPart(context.Context, *UploadPartRequest) (*UploadPartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadPart not implemented")
}
func (UnimplementedVideoServiceServer) CompleteMultipartUpload(context.Context, *CompleteMultipartUploadRequest) (*PublishVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteMultipartUpload not implemented")
}
func (UnimplementedVideoServiceServer) AbortMultipartUpload(context.Context, *AbortMultipartUploadRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AbortMultipartUpload not implemented")
}
func (UnimplementedVideoServiceServer) ListUploadedParts(context.Context, *ListUploadedPartsRequest) (*ListUploadedPartsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUploadedParts not implemented")
}
func (UnimplementedVideoServiceServer) mustEmbedUnimplementedVideoServiceServer() {}
func (UnimplementedVideoServiceServer) testEmbeddedByValue()                      {}

// UnsafeVideoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoServiceServer will
// result in compilation errors.
type UnsafeVideoServiceServer interface {
	mustEmbedUnimplementedVideoServiceServer()
}

func RegisterVideoServiceServer(s grpc.ServiceRegistrar, srv VideoServiceServer) {
	// If the following call pancis, it indicates UnimplementedVideoServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VideoService_ServiceDesc, srv)
}

func _VideoService_GetFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).GetFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoService_GetFeed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).GetFeed(ctx, req.(*GetFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_PublishVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).PublishVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoService_PublishVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).PublishVideo(ctx, req.(*PublishVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_UploadVideoFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadVideoFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).UploadVideoFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoService_UploadVideoFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).UploadVideoFile(ctx, req.(*UploadVideoFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_GetPublishList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPublishListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).GetPublishList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoService_GetPublishList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).GetPublishList(ctx, req.(*GetPublishListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_GetUploadConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUploadConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).GetUploadConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoService_GetUploadConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).GetUploadConfig(ctx, req.(*GetUploadConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_GetUploadProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUploadProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).GetUploadProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoService_GetUploadProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).GetUploadProgress(ctx, req.(*GetUploadProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_GetVideoInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVideoInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).GetVideoInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoService_GetVideoInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).GetVideoInfo(ctx, req.(*GetVideoInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_GetVideosInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVideosInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).GetVideosInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoService_GetVideosInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).GetVideosInfo(ctx, req.(*GetVideosInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_UpdateVideoStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVideoStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).UpdateVideoStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoService_UpdateVideoStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).UpdateVideoStats(ctx, req.(*UpdateVideoStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_InitiateMultipartUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitiateMultipartUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).InitiateMultipartUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoService_InitiateMultipartUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).InitiateMultipartUpload(ctx, req.(*InitiateMultipartUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_UploadPart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadPartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).UploadPart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoService_UploadPart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).UploadPart(ctx, req.(*UploadPartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_CompleteMultipartUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteMultipartUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).CompleteMultipartUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoService_CompleteMultipartUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).CompleteMultipartUpload(ctx, req.(*CompleteMultipartUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_AbortMultipartUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbortMultipartUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).AbortMultipartUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoService_AbortMultipartUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).AbortMultipartUpload(ctx, req.(*AbortMultipartUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_ListUploadedParts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUploadedPartsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).ListUploadedParts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoService_ListUploadedParts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).ListUploadedParts(ctx, req.(*ListUploadedPartsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VideoService_ServiceDesc is the grpc.ServiceDesc for VideoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VideoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "video.v1.VideoService",
	HandlerType: (*VideoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFeed",
			Handler:    _VideoService_GetFeed_Handler,
		},
		{
			MethodName: "PublishVideo",
			Handler:    _VideoService_PublishVideo_Handler,
		},
		{
			MethodName: "UploadVideoFile",
			Handler:    _VideoService_UploadVideoFile_Handler,
		},
		{
			MethodName: "GetPublishList",
			Handler:    _VideoService_GetPublishList_Handler,
		},
		{
			MethodName: "GetUploadConfig",
			Handler:    _VideoService_GetUploadConfig_Handler,
		},
		{
			MethodName: "GetUploadProgress",
			Handler:    _VideoService_GetUploadProgress_Handler,
		},
		{
			MethodName: "GetVideoInfo",
			Handler:    _VideoService_GetVideoInfo_Handler,
		},
		{
			MethodName: "GetVideosInfo",
			Handler:    _VideoService_GetVideosInfo_Handler,
		},
		{
			MethodName: "UpdateVideoStats",
			Handler:    _VideoService_UpdateVideoStats_Handler,
		},
		{
			MethodName: "InitiateMultipartUpload",
			Handler:    _VideoService_InitiateMultipartUpload_Handler,
		},
		{
			MethodName: "UploadPart",
			Handler:    _VideoService_UploadPart_Handler,
		},
		{
			MethodName: "CompleteMultipartUpload",
			Handler:    _VideoService_CompleteMultipartUpload_Handler,
		},
		{
			MethodName: "AbortMultipartUpload",
			Handler:    _VideoService_AbortMultipartUpload_Handler,
		},
		{
			MethodName: "ListUploadedParts",
			Handler:    _VideoService_ListUploadedParts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "video/v1/video.proto",
}
