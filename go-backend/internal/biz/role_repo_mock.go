// Code generated by mockery v2.53.4. DO NOT EDIT.

package biz

import (
	context "context"
	domain "go-backend/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// MockRoleRepo is an autogenerated mock type for the RoleRepo type
type MockRoleRepo struct {
	mock.Mock
}

type MockRoleRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRoleRepo) EXPECT() *MockRoleRepo_Expecter {
	return &MockRoleRepo_Expecter{mock: &_m.Mock}
}

// AssignRole provides a mock function with given fields: ctx, userID, roleID
func (_m *MockRoleRepo) AssignRole(ctx context.Context, userID int64, roleID int64) error {
	ret := _m.Called(ctx, userID, roleID)

	if len(ret) == 0 {
		panic("no return value specified for AssignRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, userID, roleID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRoleRepo_AssignRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssignRole'
type MockRoleRepo_AssignRole_Call struct {
	*mock.Call
}

// AssignRole is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
//   - roleID int64
func (_e *MockRoleRepo_Expecter) AssignRole(ctx interface{}, userID interface{}, roleID interface{}) *MockRoleRepo_AssignRole_Call {
	return &MockRoleRepo_AssignRole_Call{Call: _e.mock.On("AssignRole", ctx, userID, roleID)}
}

func (_c *MockRoleRepo_AssignRole_Call) Run(run func(ctx context.Context, userID int64, roleID int64)) *MockRoleRepo_AssignRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *MockRoleRepo_AssignRole_Call) Return(_a0 error) *MockRoleRepo_AssignRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRoleRepo_AssignRole_Call) RunAndReturn(run func(context.Context, int64, int64) error) *MockRoleRepo_AssignRole_Call {
	_c.Call.Return(run)
	return _c
}

// GetRole provides a mock function with given fields: ctx, roleID
func (_m *MockRoleRepo) GetRole(ctx context.Context, roleID int64) (*domain.Role, error) {
	ret := _m.Called(ctx, roleID)

	if len(ret) == 0 {
		panic("no return value specified for GetRole")
	}

	var r0 *domain.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*domain.Role, error)); ok {
		return rf(ctx, roleID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *domain.Role); ok {
		r0 = rf(ctx, roleID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Role)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, roleID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRoleRepo_GetRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRole'
type MockRoleRepo_GetRole_Call struct {
	*mock.Call
}

// GetRole is a helper method to define mock.On call
//   - ctx context.Context
//   - roleID int64
func (_e *MockRoleRepo_Expecter) GetRole(ctx interface{}, roleID interface{}) *MockRoleRepo_GetRole_Call {
	return &MockRoleRepo_GetRole_Call{Call: _e.mock.On("GetRole", ctx, roleID)}
}

func (_c *MockRoleRepo_GetRole_Call) Run(run func(ctx context.Context, roleID int64)) *MockRoleRepo_GetRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockRoleRepo_GetRole_Call) Return(_a0 *domain.Role, _a1 error) *MockRoleRepo_GetRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRoleRepo_GetRole_Call) RunAndReturn(run func(context.Context, int64) (*domain.Role, error)) *MockRoleRepo_GetRole_Call {
	_c.Call.Return(run)
	return _c
}

// GetRoleByName provides a mock function with given fields: ctx, name
func (_m *MockRoleRepo) GetRoleByName(ctx context.Context, name string) (*domain.Role, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetRoleByName")
	}

	var r0 *domain.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.Role, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Role); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Role)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRoleRepo_GetRoleByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRoleByName'
type MockRoleRepo_GetRoleByName_Call struct {
	*mock.Call
}

// GetRoleByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockRoleRepo_Expecter) GetRoleByName(ctx interface{}, name interface{}) *MockRoleRepo_GetRoleByName_Call {
	return &MockRoleRepo_GetRoleByName_Call{Call: _e.mock.On("GetRoleByName", ctx, name)}
}

func (_c *MockRoleRepo_GetRoleByName_Call) Run(run func(ctx context.Context, name string)) *MockRoleRepo_GetRoleByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRoleRepo_GetRoleByName_Call) Return(_a0 *domain.Role, _a1 error) *MockRoleRepo_GetRoleByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRoleRepo_GetRoleByName_Call) RunAndReturn(run func(context.Context, string) (*domain.Role, error)) *MockRoleRepo_GetRoleByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserRoles provides a mock function with given fields: ctx, userID
func (_m *MockRoleRepo) GetUserRoles(ctx context.Context, userID int64) ([]*domain.Role, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserRoles")
	}

	var r0 []*domain.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]*domain.Role, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*domain.Role); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Role)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRoleRepo_GetUserRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserRoles'
type MockRoleRepo_GetUserRoles_Call struct {
	*mock.Call
}

// GetUserRoles is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
func (_e *MockRoleRepo_Expecter) GetUserRoles(ctx interface{}, userID interface{}) *MockRoleRepo_GetUserRoles_Call {
	return &MockRoleRepo_GetUserRoles_Call{Call: _e.mock.On("GetUserRoles", ctx, userID)}
}

func (_c *MockRoleRepo_GetUserRoles_Call) Run(run func(ctx context.Context, userID int64)) *MockRoleRepo_GetUserRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockRoleRepo_GetUserRoles_Call) Return(_a0 []*domain.Role, _a1 error) *MockRoleRepo_GetUserRoles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRoleRepo_GetUserRoles_Call) RunAndReturn(run func(context.Context, int64) ([]*domain.Role, error)) *MockRoleRepo_GetUserRoles_Call {
	_c.Call.Return(run)
	return _c
}

// HasRole provides a mock function with given fields: ctx, userID, roleID
func (_m *MockRoleRepo) HasRole(ctx context.Context, userID int64, roleID int64) (bool, error) {
	ret := _m.Called(ctx, userID, roleID)

	if len(ret) == 0 {
		panic("no return value specified for HasRole")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) (bool, error)); ok {
		return rf(ctx, userID, roleID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) bool); ok {
		r0 = rf(ctx, userID, roleID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(ctx, userID, roleID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRoleRepo_HasRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasRole'
type MockRoleRepo_HasRole_Call struct {
	*mock.Call
}

// HasRole is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
//   - roleID int64
func (_e *MockRoleRepo_Expecter) HasRole(ctx interface{}, userID interface{}, roleID interface{}) *MockRoleRepo_HasRole_Call {
	return &MockRoleRepo_HasRole_Call{Call: _e.mock.On("HasRole", ctx, userID, roleID)}
}

func (_c *MockRoleRepo_HasRole_Call) Run(run func(ctx context.Context, userID int64, roleID int64)) *MockRoleRepo_HasRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *MockRoleRepo_HasRole_Call) Return(_a0 bool, _a1 error) *MockRoleRepo_HasRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRoleRepo_HasRole_Call) RunAndReturn(run func(context.Context, int64, int64) (bool, error)) *MockRoleRepo_HasRole_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveRole provides a mock function with given fields: ctx, userID, roleID
func (_m *MockRoleRepo) RemoveRole(ctx context.Context, userID int64, roleID int64) error {
	ret := _m.Called(ctx, userID, roleID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, userID, roleID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRoleRepo_RemoveRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveRole'
type MockRoleRepo_RemoveRole_Call struct {
	*mock.Call
}

// RemoveRole is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
//   - roleID int64
func (_e *MockRoleRepo_Expecter) RemoveRole(ctx interface{}, userID interface{}, roleID interface{}) *MockRoleRepo_RemoveRole_Call {
	return &MockRoleRepo_RemoveRole_Call{Call: _e.mock.On("RemoveRole", ctx, userID, roleID)}
}

func (_c *MockRoleRepo_RemoveRole_Call) Run(run func(ctx context.Context, userID int64, roleID int64)) *MockRoleRepo_RemoveRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *MockRoleRepo_RemoveRole_Call) Return(_a0 error) *MockRoleRepo_RemoveRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRoleRepo_RemoveRole_Call) RunAndReturn(run func(context.Context, int64, int64) error) *MockRoleRepo_RemoveRole_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRoleRepo creates a new instance of MockRoleRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRoleRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRoleRepo {
	mock := &MockRoleRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
