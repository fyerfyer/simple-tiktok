// Code generated by mockery v2.53.4. DO NOT EDIT.

package biz

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockRelationRepo is an autogenerated mock type for the RelationRepo type
type MockRelationRepo struct {
	mock.Mock
}

type MockRelationRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRelationRepo) EXPECT() *MockRelationRepo_Expecter {
	return &MockRelationRepo_Expecter{mock: &_m.Mock}
}

// Follow provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockRelationRepo) Follow(_a0 context.Context, _a1 int64, _a2 int64) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for Follow")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRelationRepo_Follow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Follow'
type MockRelationRepo_Follow_Call struct {
	*mock.Call
}

// Follow is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 int64
//   - _a2 int64
func (_e *MockRelationRepo_Expecter) Follow(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MockRelationRepo_Follow_Call {
	return &MockRelationRepo_Follow_Call{Call: _e.mock.On("Follow", _a0, _a1, _a2)}
}

func (_c *MockRelationRepo_Follow_Call) Run(run func(_a0 context.Context, _a1 int64, _a2 int64)) *MockRelationRepo_Follow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *MockRelationRepo_Follow_Call) Return(_a0 error) *MockRelationRepo_Follow_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRelationRepo_Follow_Call) RunAndReturn(run func(context.Context, int64, int64) error) *MockRelationRepo_Follow_Call {
	_c.Call.Return(run)
	return _c
}

// GetFollowList provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockRelationRepo) GetFollowList(_a0 context.Context, _a1 int64, _a2 int32, _a3 int32) ([]*User, int64, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	if len(ret) == 0 {
		panic("no return value specified for GetFollowList")
	}

	var r0 []*User
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int32, int32) ([]*User, int64, error)); ok {
		return rf(_a0, _a1, _a2, _a3)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int32, int32) []*User); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int32, int32) int64); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int64, int32, int32) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockRelationRepo_GetFollowList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFollowList'
type MockRelationRepo_GetFollowList_Call struct {
	*mock.Call
}

// GetFollowList is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 int64
//   - _a2 int32
//   - _a3 int32
func (_e *MockRelationRepo_Expecter) GetFollowList(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 interface{}) *MockRelationRepo_GetFollowList_Call {
	return &MockRelationRepo_GetFollowList_Call{Call: _e.mock.On("GetFollowList", _a0, _a1, _a2, _a3)}
}

func (_c *MockRelationRepo_GetFollowList_Call) Run(run func(_a0 context.Context, _a1 int64, _a2 int32, _a3 int32)) *MockRelationRepo_GetFollowList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int32), args[3].(int32))
	})
	return _c
}

func (_c *MockRelationRepo_GetFollowList_Call) Return(_a0 []*User, _a1 int64, _a2 error) *MockRelationRepo_GetFollowList_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockRelationRepo_GetFollowList_Call) RunAndReturn(run func(context.Context, int64, int32, int32) ([]*User, int64, error)) *MockRelationRepo_GetFollowList_Call {
	_c.Call.Return(run)
	return _c
}

// GetFollowerList provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockRelationRepo) GetFollowerList(_a0 context.Context, _a1 int64, _a2 int32, _a3 int32) ([]*User, int64, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	if len(ret) == 0 {
		panic("no return value specified for GetFollowerList")
	}

	var r0 []*User
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int32, int32) ([]*User, int64, error)); ok {
		return rf(_a0, _a1, _a2, _a3)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int32, int32) []*User); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int32, int32) int64); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int64, int32, int32) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockRelationRepo_GetFollowerList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFollowerList'
type MockRelationRepo_GetFollowerList_Call struct {
	*mock.Call
}

// GetFollowerList is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 int64
//   - _a2 int32
//   - _a3 int32
func (_e *MockRelationRepo_Expecter) GetFollowerList(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 interface{}) *MockRelationRepo_GetFollowerList_Call {
	return &MockRelationRepo_GetFollowerList_Call{Call: _e.mock.On("GetFollowerList", _a0, _a1, _a2, _a3)}
}

func (_c *MockRelationRepo_GetFollowerList_Call) Run(run func(_a0 context.Context, _a1 int64, _a2 int32, _a3 int32)) *MockRelationRepo_GetFollowerList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int32), args[3].(int32))
	})
	return _c
}

func (_c *MockRelationRepo_GetFollowerList_Call) Return(_a0 []*User, _a1 int64, _a2 error) *MockRelationRepo_GetFollowerList_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockRelationRepo_GetFollowerList_Call) RunAndReturn(run func(context.Context, int64, int32, int32) ([]*User, int64, error)) *MockRelationRepo_GetFollowerList_Call {
	_c.Call.Return(run)
	return _c
}

// GetFriendList provides a mock function with given fields: _a0, _a1
func (_m *MockRelationRepo) GetFriendList(_a0 context.Context, _a1 int64) ([]*User, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetFriendList")
	}

	var r0 []*User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]*User, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*User); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRelationRepo_GetFriendList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFriendList'
type MockRelationRepo_GetFriendList_Call struct {
	*mock.Call
}

// GetFriendList is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 int64
func (_e *MockRelationRepo_Expecter) GetFriendList(_a0 interface{}, _a1 interface{}) *MockRelationRepo_GetFriendList_Call {
	return &MockRelationRepo_GetFriendList_Call{Call: _e.mock.On("GetFriendList", _a0, _a1)}
}

func (_c *MockRelationRepo_GetFriendList_Call) Run(run func(_a0 context.Context, _a1 int64)) *MockRelationRepo_GetFriendList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockRelationRepo_GetFriendList_Call) Return(_a0 []*User, _a1 error) *MockRelationRepo_GetFriendList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRelationRepo_GetFriendList_Call) RunAndReturn(run func(context.Context, int64) ([]*User, error)) *MockRelationRepo_GetFriendList_Call {
	_c.Call.Return(run)
	return _c
}

// IsFollowing provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockRelationRepo) IsFollowing(_a0 context.Context, _a1 int64, _a2 int64) (bool, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for IsFollowing")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) (bool, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) bool); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRelationRepo_IsFollowing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsFollowing'
type MockRelationRepo_IsFollowing_Call struct {
	*mock.Call
}

// IsFollowing is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 int64
//   - _a2 int64
func (_e *MockRelationRepo_Expecter) IsFollowing(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MockRelationRepo_IsFollowing_Call {
	return &MockRelationRepo_IsFollowing_Call{Call: _e.mock.On("IsFollowing", _a0, _a1, _a2)}
}

func (_c *MockRelationRepo_IsFollowing_Call) Run(run func(_a0 context.Context, _a1 int64, _a2 int64)) *MockRelationRepo_IsFollowing_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *MockRelationRepo_IsFollowing_Call) Return(_a0 bool, _a1 error) *MockRelationRepo_IsFollowing_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRelationRepo_IsFollowing_Call) RunAndReturn(run func(context.Context, int64, int64) (bool, error)) *MockRelationRepo_IsFollowing_Call {
	_c.Call.Return(run)
	return _c
}

// Unfollow provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockRelationRepo) Unfollow(_a0 context.Context, _a1 int64, _a2 int64) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for Unfollow")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRelationRepo_Unfollow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unfollow'
type MockRelationRepo_Unfollow_Call struct {
	*mock.Call
}

// Unfollow is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 int64
//   - _a2 int64
func (_e *MockRelationRepo_Expecter) Unfollow(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MockRelationRepo_Unfollow_Call {
	return &MockRelationRepo_Unfollow_Call{Call: _e.mock.On("Unfollow", _a0, _a1, _a2)}
}

func (_c *MockRelationRepo_Unfollow_Call) Run(run func(_a0 context.Context, _a1 int64, _a2 int64)) *MockRelationRepo_Unfollow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *MockRelationRepo_Unfollow_Call) Return(_a0 error) *MockRelationRepo_Unfollow_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRelationRepo_Unfollow_Call) RunAndReturn(run func(context.Context, int64, int64) error) *MockRelationRepo_Unfollow_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRelationRepo creates a new instance of MockRelationRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRelationRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRelationRepo {
	mock := &MockRelationRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
