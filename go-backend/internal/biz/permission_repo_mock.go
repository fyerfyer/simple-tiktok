// Code generated by mockery v2.53.4. DO NOT EDIT.

package biz

import (
	context "context"
	domain "go-backend/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// MockPermissionRepo is an autogenerated mock type for the PermissionRepo type
type MockPermissionRepo struct {
	mock.Mock
}

type MockPermissionRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPermissionRepo) EXPECT() *MockPermissionRepo_Expecter {
	return &MockPermissionRepo_Expecter{mock: &_m.Mock}
}

// GetPermission provides a mock function with given fields: ctx, permissionID
func (_m *MockPermissionRepo) GetPermission(ctx context.Context, permissionID int64) (*domain.Permission, error) {
	ret := _m.Called(ctx, permissionID)

	if len(ret) == 0 {
		panic("no return value specified for GetPermission")
	}

	var r0 *domain.Permission
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*domain.Permission, error)); ok {
		return rf(ctx, permissionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *domain.Permission); ok {
		r0 = rf(ctx, permissionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Permission)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, permissionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPermissionRepo_GetPermission_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPermission'
type MockPermissionRepo_GetPermission_Call struct {
	*mock.Call
}

// GetPermission is a helper method to define mock.On call
//   - ctx context.Context
//   - permissionID int64
func (_e *MockPermissionRepo_Expecter) GetPermission(ctx interface{}, permissionID interface{}) *MockPermissionRepo_GetPermission_Call {
	return &MockPermissionRepo_GetPermission_Call{Call: _e.mock.On("GetPermission", ctx, permissionID)}
}

func (_c *MockPermissionRepo_GetPermission_Call) Run(run func(ctx context.Context, permissionID int64)) *MockPermissionRepo_GetPermission_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockPermissionRepo_GetPermission_Call) Return(_a0 *domain.Permission, _a1 error) *MockPermissionRepo_GetPermission_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPermissionRepo_GetPermission_Call) RunAndReturn(run func(context.Context, int64) (*domain.Permission, error)) *MockPermissionRepo_GetPermission_Call {
	_c.Call.Return(run)
	return _c
}

// GetRolePermissions provides a mock function with given fields: ctx, roleID
func (_m *MockPermissionRepo) GetRolePermissions(ctx context.Context, roleID int64) ([]*domain.Permission, error) {
	ret := _m.Called(ctx, roleID)

	if len(ret) == 0 {
		panic("no return value specified for GetRolePermissions")
	}

	var r0 []*domain.Permission
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]*domain.Permission, error)); ok {
		return rf(ctx, roleID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*domain.Permission); ok {
		r0 = rf(ctx, roleID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Permission)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, roleID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPermissionRepo_GetRolePermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRolePermissions'
type MockPermissionRepo_GetRolePermissions_Call struct {
	*mock.Call
}

// GetRolePermissions is a helper method to define mock.On call
//   - ctx context.Context
//   - roleID int64
func (_e *MockPermissionRepo_Expecter) GetRolePermissions(ctx interface{}, roleID interface{}) *MockPermissionRepo_GetRolePermissions_Call {
	return &MockPermissionRepo_GetRolePermissions_Call{Call: _e.mock.On("GetRolePermissions", ctx, roleID)}
}

func (_c *MockPermissionRepo_GetRolePermissions_Call) Run(run func(ctx context.Context, roleID int64)) *MockPermissionRepo_GetRolePermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockPermissionRepo_GetRolePermissions_Call) Return(_a0 []*domain.Permission, _a1 error) *MockPermissionRepo_GetRolePermissions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPermissionRepo_GetRolePermissions_Call) RunAndReturn(run func(context.Context, int64) ([]*domain.Permission, error)) *MockPermissionRepo_GetRolePermissions_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserPermissions provides a mock function with given fields: ctx, userID
func (_m *MockPermissionRepo) GetUserPermissions(ctx context.Context, userID int64) ([]*domain.Permission, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserPermissions")
	}

	var r0 []*domain.Permission
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]*domain.Permission, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*domain.Permission); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Permission)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPermissionRepo_GetUserPermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserPermissions'
type MockPermissionRepo_GetUserPermissions_Call struct {
	*mock.Call
}

// GetUserPermissions is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
func (_e *MockPermissionRepo_Expecter) GetUserPermissions(ctx interface{}, userID interface{}) *MockPermissionRepo_GetUserPermissions_Call {
	return &MockPermissionRepo_GetUserPermissions_Call{Call: _e.mock.On("GetUserPermissions", ctx, userID)}
}

func (_c *MockPermissionRepo_GetUserPermissions_Call) Run(run func(ctx context.Context, userID int64)) *MockPermissionRepo_GetUserPermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockPermissionRepo_GetUserPermissions_Call) Return(_a0 []*domain.Permission, _a1 error) *MockPermissionRepo_GetUserPermissions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPermissionRepo_GetUserPermissions_Call) RunAndReturn(run func(context.Context, int64) ([]*domain.Permission, error)) *MockPermissionRepo_GetUserPermissions_Call {
	_c.Call.Return(run)
	return _c
}

// HasPermission provides a mock function with given fields: ctx, userID, resource, action
func (_m *MockPermissionRepo) HasPermission(ctx context.Context, userID int64, resource string, action string) (bool, error) {
	ret := _m.Called(ctx, userID, resource, action)

	if len(ret) == 0 {
		panic("no return value specified for HasPermission")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, string) (bool, error)); ok {
		return rf(ctx, userID, resource, action)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, string) bool); ok {
		r0 = rf(ctx, userID, resource, action)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, string, string) error); ok {
		r1 = rf(ctx, userID, resource, action)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPermissionRepo_HasPermission_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasPermission'
type MockPermissionRepo_HasPermission_Call struct {
	*mock.Call
}

// HasPermission is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
//   - resource string
//   - action string
func (_e *MockPermissionRepo_Expecter) HasPermission(ctx interface{}, userID interface{}, resource interface{}, action interface{}) *MockPermissionRepo_HasPermission_Call {
	return &MockPermissionRepo_HasPermission_Call{Call: _e.mock.On("HasPermission", ctx, userID, resource, action)}
}

func (_c *MockPermissionRepo_HasPermission_Call) Run(run func(ctx context.Context, userID int64, resource string, action string)) *MockPermissionRepo_HasPermission_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockPermissionRepo_HasPermission_Call) Return(_a0 bool, _a1 error) *MockPermissionRepo_HasPermission_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPermissionRepo_HasPermission_Call) RunAndReturn(run func(context.Context, int64, string, string) (bool, error)) *MockPermissionRepo_HasPermission_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPermissionRepo creates a new instance of MockPermissionRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPermissionRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPermissionRepo {
	mock := &MockPermissionRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
