syntax = "proto3";
package kratos.api;

option go_package = "go-backend/internal/conf;conf";

import "google/protobuf/duration.proto";

message Bootstrap {
  Server server = 1;
  Data data = 2;
  JWT jwt = 3;
  Business business = 4;
}

message Server {
  message HTTP {
    string network = 1;
    string addr = 2;
    google.protobuf.Duration timeout = 3;
  }
  message GRPC {
    string network = 1;
    string addr = 2;
    google.protobuf.Duration timeout = 3;
  }
  HTTP http = 1;
  GRPC grpc = 2;
}

message Data {
  message Database {
    string driver = 1;
    string source = 2;
    int32 max_idle_conns = 3;
    int32 max_open_conns = 4;
    google.protobuf.Duration conn_max_lifetime = 5;
  }
  message Redis {
    string addr = 1;
    string password = 2;
    int32 db = 3;
    google.protobuf.Duration dial_timeout = 4;
    google.protobuf.Duration read_timeout = 5;
    google.protobuf.Duration write_timeout = 6;
    int32 pool_size = 7;
  }
  message MinIO {
    string endpoint = 1;
    string access_key = 2;
    string secret_key = 3;
    string bucket_name = 4;
    string region = 5;
    bool use_ssl = 6;
    string base_url = 7;
  }
  message Qiniu {
    string access_key = 1;
    string secret_key = 2;
    string bucket_name = 3;
    string domain = 4;
    string region = 5;
    bool use_https = 6;
    string record_dir = 7;  // 断点续传记录目录
  }
  message Kafka {
    repeated string brokers = 1;
    Producer producer = 2;
    Consumer consumer = 3;
    
    message Producer {
      int32 retry_max = 1;
      int32 batch_size = 2;
      int32 linger_ms = 3;
      string compression_type = 4;
    }
    
    message Consumer {
      string group_id = 1;
      bool auto_commit = 2;
      google.protobuf.Duration session_timeout = 3;
      int32 fetch_min_bytes = 4;
      google.protobuf.Duration fetch_max_wait = 5;
    }
  }
  
  Database database = 1;
  Redis redis = 2;
  MinIO minio = 3;
  Qiniu qiniu = 4;
  Kafka kafka = 5;
}

message JWT {
  string secret = 1;
  google.protobuf.Duration expire_time = 2;
}

message Business {
  message User {
    int32 password_salt_length = 1;
    int32 username_min_length = 2;
    int32 username_max_length = 3;
    int32 password_min_length = 4;
    int32 password_max_length = 5;
  }
  message Video {
    int64 max_file_size = 1;
    int32 max_title_length = 2;
    int32 default_feed_limit = 3;
    repeated string supported_formats = 4;
    int32 cover_quality = 5;
    int32 cover_width = 6;
    int32 cover_height = 7;
    string temp_dir = 8;  // 视频处理临时目录
  }
  message Storage {
    google.protobuf.Duration upload_timeout = 1;
    google.protobuf.Duration download_timeout = 2;
    google.protobuf.Duration presigned_url_expire = 3;
    string default_provider = 4;
    int64 multipart_chunk_size = 5;  // 分片大小
    int32 max_concurrent_uploads = 6; // 最大并发上传数
  }
  message KafkaTopics {
    string video_upload = 1;
    string video_process = 2;
    string video_stats = 3;
    string user_action = 4;
  }
  
  User user = 1;
  Video video = 2;
  Storage storage = 3;
  KafkaTopics kafka_topics = 4;
}