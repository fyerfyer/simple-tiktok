// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"go-backend/internal/biz"
	"go-backend/internal/conf"
	"go-backend/internal/data"
	"go-backend/internal/middleware"
	"go-backend/internal/server"
	"go-backend/internal/service"
	"go-backend/pkg/auth"
	"go-backend/pkg/security"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, bootstrap *conf.Bootstrap, logger log.Logger) (*kratos.App, func(), error) {
	dataData, cleanup, err := data.NewData(confData, logger)
	if err != nil {
		return nil, nil, err
	}
	multiLevelCache := data.NewMultiLevelCache(dataData)
	userCache := data.NewUserCache(multiLevelCache, logger)
	passwordManager := newPasswordManager()
	userRepo := data.NewUserRepo(dataData, userCache, passwordManager, logger)
	userUsecase := biz.NewUserUsecase(userRepo, logger)
	relationRepo := data.NewRelationRepo(dataData, logger)
	relationUsecase := biz.NewRelationUsecase(relationRepo, logger)
	authCache := data.NewAuthCache(multiLevelCache, logger)
	sessionRepo := data.NewSessionRepo(dataData, authCache, logger)
	jwtManager := newJWTManager(bootstrap)
	sessionManager := newSessionManager()
	authUsecase := biz.NewAuthUsecase(sessionRepo, userRepo, jwtManager, sessionManager, logger)
	roleRepo := data.NewRoleRepo(dataData, logger)
	permissionRepo := data.NewPermissionRepo(dataData, roleRepo, logger)
	rbacManager := newMemoryRBACManager()
	permissionUsecase := biz.NewPermissionUsecase(roleRepo, permissionRepo, rbacManager, logger)
	validator := newValidator()
	userService := service.NewUserService(userUsecase, relationUsecase, authUsecase, permissionUsecase, jwtManager, validator, logger)
	authMiddleware := middleware.NewAuthMiddleware(jwtManager, logger)
	grpcServer := server.NewGRPCServer(confServer, userService, authMiddleware, logger)
	permissionChecker := newSimplePermissionChecker(rbacManager)
	rbacMiddleware := middleware.NewRBACMiddleware(permissionChecker, logger)
	rateLimitMiddleware := middleware.NewRateLimitMiddleware(logger)
	securityMiddleware := middleware.NewSecurityMiddleware(validator, logger)
	httpServer := server.NewHTTPServer(confServer, userService, authMiddleware, rbacMiddleware, rateLimitMiddleware, securityMiddleware, logger)
	app := newApp(logger, grpcServer, httpServer)
	return app, func() {
		cleanup()
	}, nil
}

// wire.go:

// Provider functions
func newJWTManager(bc *conf.Bootstrap) *auth.JWTManager {
	return auth.NewJWTManager(
		bc.Jwt.Secret,
		bc.Jwt.ExpireTime.AsDuration(),
	)
}

func newPasswordManager() *auth.PasswordManager {
	return auth.NewPasswordManager()
}

func newMemoryRBACManager() auth.RBACManager {
	return auth.NewMemoryRBACManager()
}

func newSimplePermissionChecker(rbacManager auth.RBACManager) auth.PermissionChecker {
	return auth.NewSimplePermissionChecker(rbacManager)
}

func newValidator() *security.Validator {
	return security.NewValidator()
}

func newSessionManager() auth.SessionManager {
	return auth.NewMemorySessionManager()
}
